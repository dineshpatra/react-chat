{"version":3,"sources":["pages/Login.tsx","Services/utility.ts"],"names":["LoginPage","props","state","email","touched","value","hasError","password","isProcessing","doLogin","bind","handleChange","document","title","this","setState","signin","user","history","push","console","error","event","elm","target","name","val","test","id","Typography","variant","component","style","textAlign","Divider","FormGroup","FormControl","marginBottom","TextField","label","onChange","helperText","undefined","type","Button","color","onClick","disabled","Loading","React","Component","connect","dispatch","bindActionCreators","UserActions","withRouter"],"mappings":"wUAiBMA,E,kDAcF,WAAYC,GAAY,IAAD,8BACnB,cAAMA,IAdVC,MAAY,CACRC,MAAQ,CACJC,SAAW,EACXC,MAAW,GACXC,UAAW,GAEfC,SAAW,CACPH,SAAW,EACXC,MAAW,GACXC,UAAW,GAEfE,cAAc,GAId,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAHD,E,iEAMnBE,SAASC,MAAQ,U,gKAIbC,KAAKC,UAAS,iBAAO,CAACP,cAAa,M,SAClBQ,YACbF,KAAKZ,MAAMC,MAAME,MACjBS,KAAKZ,MAAMK,SAASF,O,cAFpBY,E,gBAIEH,KAAKb,MAAMQ,QAAQQ,G,OACzBH,KAAKC,UAAS,iBAAO,CAACP,cAAa,MACnCM,KAAKb,MAAMiB,QAAQC,KAAK,K,kDAExBC,QAAQC,MAAR,M,mJAGKC,GACT,IAAIC,EAAMD,EAAME,OAChBV,KAAKC,UAAS,SAACb,GAAD,sBACTqB,EAAIE,KADK,YAAC,eAEJvB,EAAMqB,EAAIE,OAFP,IAGNpB,MAAOkB,EAAIlB,MACXC,SAAsB,SAAZiB,EAAIE,MC3DDC,ED2DgCH,EAAIlB,OC1D9C,yJACEsB,KAAKD,KDyDiD,eAAeC,KAAKJ,EAAIlB,UC3DvE,IAACqB,O,+BDgErB,OACI,sBAAKE,GAAG,YAAR,UACI,sBAAKA,GAAG,YAAR,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,MAAO,CAACC,UAAU,UAA1D,wBACA,cAACJ,EAAA,EAAD,CAAYG,MAAO,CAACC,UAAU,UAA9B,qBACA,cAACC,EAAA,EAAD,IACCpB,KAAKZ,MAAMC,MAAMG,SAClB,qBAAKsB,GAAG,mBAAR,SACI,eAACO,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAaJ,MAAO,CAACK,aAAc,QAAnC,SACI,cAACC,EAAA,EAAD,CACIb,KAAW,QACXc,MAAW,QACXT,QAAW,WACXU,SAAY1B,KAAKH,aACjB8B,WAAY3B,KAAKZ,MAAMC,MAAMG,SAAW,uCAAoCoC,EAC5ErB,MAAOP,KAAKZ,MAAMC,MAAMG,aAGhC,cAAC8B,EAAA,EAAD,CAAcJ,MAAO,CAACK,aAAc,QAApC,SACI,cAACC,EAAA,EAAD,CACIb,KAAW,WACXc,MAAW,WACXT,QAAW,WACXa,KAAW,WACXH,SAAY1B,KAAKH,aACjB8B,WAAY3B,KAAKZ,MAAMK,SAASD,SAAW,kCAA+BoC,EAC1ErB,MAAOP,KAAKZ,MAAMK,SAASD,aAGnC,cAACsC,EAAA,EAAD,CAAQC,MAAM,UAAUf,QAAQ,YAAYgB,QAAShC,KAAKL,QACtDsC,SAAWjC,KAAKZ,MAAMC,MAAMG,UAAYQ,KAAKZ,MAAMK,SAASD,SADhE,6BAKXQ,KAAKZ,MAAMM,aAAe,cAACwC,EAAA,EAAD,SAAYN,S,GAlF/BO,IAAMC,WAuFfC,sBAAQ,MAAM,SAACC,GAAD,OAAcC,YAAmBC,EAAcF,KAA7DD,CAAwEI,YAAWvD","file":"static/js/5.f35d14eb.chunk.js","sourcesContent":["import React, {ChangeEvent, MouseEvent, FocusEvent} from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as UserActions from '../redux/actions/UserActions';\r\nimport { isValidEmail } from '../Services/utility';\r\nimport Loading from '../Components/Loading';\r\nimport { app, signin } from '../Services/Firebase';\r\nimport {\r\n    Divider\r\n    ,Typography\r\n    ,FormGroup\r\n    ,Button\r\n    ,TextField\r\n    ,FormControl\r\n} from '@material-ui/core';\r\n\r\nclass LoginPage extends React.Component<any, any> {\r\n    state:any = {\r\n        email : {\r\n            touched  : false,\r\n            value    : '',\r\n            hasError : false\r\n        },\r\n        password : {\r\n            touched  : false,\r\n            value    : '',\r\n            hasError : false\r\n        },\r\n        isProcessing: false\r\n    };\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.doLogin = this.doLogin.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        document.title = \"Login\";\r\n    }\r\n    async doLogin() {\r\n        try {\r\n            this.setState(() => ({isProcessing:true}));\r\n            let user = await signin(\r\n                this.state.email.value,\r\n                this.state.password.value\r\n            );\r\n            await this.props.doLogin(user);\r\n            this.setState(() => ({isProcessing:false}));\r\n            this.props.history.push('/');\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n    handleChange(event: ChangeEvent) {\r\n        let elm = event.target as HTMLInputElement;\r\n        this.setState((state:any) => ({\r\n            [elm.name] : {\r\n                ...state[elm.name], \r\n                value: elm.value, \r\n                hasError: elm.name == 'email' ? isValidEmail(elm.value) : !/[\\d\\w\\W]{6,}/.test(elm.value)\r\n            }\r\n        }));\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"loginPage\">\r\n                <div id=\"loginForm\">\r\n                    <Typography variant=\"h4\" component=\"h2\" style={{textAlign:\"center\"}}>React Chat</Typography>\r\n                    <Typography style={{textAlign:\"center\"}}>Sign In</Typography>\r\n                    <Divider />\r\n                    {this.state.email.hasError}\r\n                    <div id=\"loginFormContent\">\r\n                        <FormGroup>\r\n                            <FormControl style={{marginBottom: \"15px\"}}>\r\n                                <TextField \r\n                                    name     = \"email\" \r\n                                    label    = \"Email\"\r\n                                    variant  = \"outlined\"\r\n                                    onChange = {this.handleChange}\r\n                                    helperText={this.state.email.hasError ? \"Invalid email address provided.\" : undefined}\r\n                                    error={this.state.email.hasError}\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl  style={{marginBottom: \"15px\"}}>\r\n                                <TextField \r\n                                    name     = \"password\" \r\n                                    label    = \"Password\"\r\n                                    variant  = \"outlined\"\r\n                                    type     = \"password\"\r\n                                    onChange = {this.handleChange}\r\n                                    helperText={this.state.password.hasError ? \"Invalid password provided.\" : undefined}\r\n                                    error={this.state.password.hasError}\r\n                                />\r\n                            </FormControl>\r\n                            <Button color=\"primary\" variant=\"contained\" onClick={this.doLogin}\r\n                                disabled={(this.state.email.hasError || this.state.password.hasError)}>Sign In</Button>\r\n                        </FormGroup>              \r\n                    </div>\r\n                </div>\r\n                {this.state.isProcessing ? <Loading/>: undefined }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect(null, (dispatch) => bindActionCreators(UserActions , dispatch))(withRouter(LoginPage));","export const isValidEmail = (val:string) => {\r\n    let regEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return !regEmail.test(val);\r\n  }\r\n"],"sourceRoot":""}