{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Components/Users.tsx","Components/ChatWindow.tsx","Components/ChatWindows.tsx","pages/Home.tsx"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_toConsumableArray","isArray","iter","Symbol","iterator","Object","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","TypeError","Users","props","state","users","componentDidMount","a","database","ref","once","db","val","values","forEach","user","setState","prevState","id","email","console","log","this","map","className","onClick","event","target","addNewChatWindow","React","Component","ChatWindow","messages","typedMsg","printedMessages","messagesEndRef","createRef","dbRef","scrollToBottom","current","scrollIntoView","behavior","bind","sendMessage","off","on","snapshot","vals","filter","msg","to","currentUser","includes","prevstate","push","errorObject","message","Date","getTime","sent","status","ev","elm","value","dt","obj","getFullYear","getMonth","getDate","getHours","getMinutes","removeChatWindow","formattedDate","onSubmit","onKeyPress","keyCode","which","placeholder","onChange","connect","ChatWindows","chatUserIds","Home","userId","Set","splice","findIndex","item","document","title","isLoggedIn","withRouter"],"mappings":"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","file":"static/js/4.704a75bf.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\r\nimport {database} from '../Services/Firebase';\r\n\r\nexport default class Users extends React.Component<any, any> {\r\n    state:{\r\n        users: Array<{\r\n            email: string,\r\n            id: string\r\n        }>\r\n    } = {\r\n        users: []\r\n    };\r\n\r\n    /**\r\n     * Constructor method\r\n     * \r\n     * @param props \r\n     */\r\n    constructor(props:any) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        try {\r\n            let db = await database.ref(\"/users\").once('value');\r\n            let users:Array<{id:string, email:string}> = db.val();\r\n            Object.values(users).forEach((user) => {\r\n                this.setState((prevState:any) => ({\r\n                    users: [\r\n                        ...prevState.users,\r\n                        {\r\n                            id: user.id,\r\n                            email: user.email\r\n                        }\r\n                    ]\r\n                }));\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n        \r\n        // Will be our firebase\r\n        // get users\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id=\"userList\">\r\n                    {\r\n                        this.state.users.map((user) => {\r\n                            {\r\n                                return (\r\n                                    <div className=\"user\" \r\n                                        id={user.id}\r\n                                        onClick={\r\n                                            (event) => {\r\n                                                let target = event.target as HTMLDivElement;\r\n                                                this.props.addNewChatWindow(user)\r\n                                            }\r\n                                        }>{user.email}</div>\r\n                                )\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React , {ChangeEvent, KeyboardEvent} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { database as db } from '../Services/Firebase';\r\n\r\nclass ChatWindow extends React.Component<any, any> {\r\n    state = {\r\n        messages: [],\r\n        typedMsg: ''\r\n    }\r\n    printedMessages: Array<string> = [];\r\n    messagesEndRef = React.createRef<HTMLDivElement>();\r\n    dbRef: any;\r\n    constructor(props: any) {\r\n        super(props);\r\n        console.log(\"@props\", props);\r\n        this.typedMsg = this.typedMsg.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n    }\r\n    componentDidUpdate () {\r\n        this.scrollToBottom()\r\n    }\r\n    scrollToBottom = () => {\r\n        this.messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n    componentWillUnmount() {\r\n        this.dbRef.off();\r\n    }\r\n    componentDidMount() {\r\n        this.dbRef = db.ref('chats');\r\n        this.dbRef.on(\"value\", (snapshot:any) => {\r\n            let vals: any = snapshot.val();\r\n            let messages = Object.values(vals).filter((msg:any) => {\r\n                return (\r\n                    (\r\n                        (\r\n                            msg.to == this.props.currentUser.id \r\n                            && msg.from == this.props.user.id\r\n                        )\r\n                         ||\r\n                        (\r\n                            msg.from == this.props.currentUser.id \r\n                            && msg.to == this.props.user.id\r\n                        )\r\n                    )\r\n                    && !this.printedMessages.includes(msg.id.toString())\r\n                ) ?? msg\r\n            });\r\n            messages.forEach((msg:any) => {\r\n                this.setState((prevstate:any) => {\r\n                    this.printedMessages.push(msg.id.toString());\r\n                    this.scrollToBottom()\r\n                    return {\r\n                        ...prevstate,\r\n                        messages: [...prevstate.messages, msg]\r\n                    }\r\n                });\r\n            });\r\n          }, function (errorObject: any) {\r\n            console.log(\"The read failed: \", errorObject);\r\n          });\r\n    }\r\n\r\n    async sendMessage() {\r\n        let message = {\r\n            id : (new Date()).getTime(),\r\n            sent: false,\r\n            status: \"to-be-sent\",\r\n            message: this.state.typedMsg,\r\n            from: this.props.currentUser.id,\r\n            to  : this.props.user.id\r\n        }\r\n        \r\n        this.printedMessages.push(message.id.toString());\r\n        this.setState((prevState:any) => ({\r\n            ...prevState,\r\n            typedMsg: \"\",\r\n            messages: [...prevState.messages, message]\r\n        }));\r\n        await db.ref(\"/chats\").push(message);\r\n        this.setState((prevState:any) => ({\r\n            ...prevState,\r\n            messages: [...prevState.messages.map((msg:any) =>{ msg.status = msg.id == message.id ? 'sent' : msg.status; return msg; })]\r\n        }));\r\n        console.log(this.state.messages);\r\n        \r\n    }\r\n    typedMsg(ev: ChangeEvent) {\r\n        let elm = ev.target as HTMLInputElement;\r\n        this.setState((prevState: any) => ({\r\n            ...prevState,\r\n            typedMsg: elm.value\r\n        }));\r\n    }\r\n    formattedDate(dt:number) {\r\n        let obj = new Date(dt);\r\n        return obj.getFullYear() + \"/\"\r\n               + (obj.getMonth() + 1) + (\"/\")\r\n               + obj.getDate() + \" \"\r\n               + obj.getHours() + \":\" + obj.getMinutes();\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div className='chatWindow'>\r\n                <div className=\"chat-header\">\r\n                    <div className=\"close-div\" onClick={() => {\r\n                        this.props.removeChatWindow(this.props.user.id)\r\n                    }}>&times;</div>\r\n                    { this.props.user.email }\r\n                </div>\r\n                <div className=\"chat-messages\">\r\n                    {\r\n                        this.state.messages.map((message: any) => { return (\r\n                            <div className={ \"messages \" + message.status + \" \" + (message.from == this.props.currentUser.id ? 'my-msg' : 'recieved-msg')}>\r\n                                <div className=\"msg-box\">\r\n                                    <span className=\"msg\"> {message.message}</span>\r\n                                    <div className=\"time\"> {this.formattedDate(message.id)}\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                        )})\r\n                    }\r\n                    <div ref={this.messagesEndRef}></div>\r\n                </div>\r\n                <div className=\"chat-footer\">\r\n                    <form onSubmit={this.sendMessage}>\r\n                    <textarea onKeyPress={(ev:KeyboardEvent<HTMLTextAreaElement>) =>{\r\n                        let key=ev.keyCode || ev.which;\r\n                        if (key == 13) {\r\n                            this.sendMessage();\r\n                        }\r\n                    }} className=\"chatInput\" placeholder=\"Type something\" onChange={this.typedMsg} value={this.state.typedMsg}></textarea>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect((state: any) => ({\r\n    currentUser: state.user\r\n}))(ChatWindow);","import React from 'react';\r\nimport { threadId } from 'worker_threads';\r\nimport ChatWindow  from './ChatWindow';\r\n\r\nexport default class ChatWindows extends React.Component<any, any> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"chatWindows\">\r\n                {\r\n                    this.props.chatUserIds.map((user:any) => (<ChatWindow user={user} removeChatWindow={this.props.removeChatWindow}/>))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {withRouter } from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from '../redux/reducers';\r\nimport Users from '../Components/Users';\r\nimport ChatWindows from '../Components/ChatWindows';\r\nimport { ChatWindowsProvider } from '../context/ChatWindow';\r\n\r\nexport class Home extends React.Component<any, any> {\r\n    state = {\r\n        chatUserIds: []\r\n    }\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.addNewChatWindow = this.addNewChatWindow.bind(this);\r\n        this.removeChatWindow = this.removeChatWindow.bind(this);\r\n    }\r\n    addNewChatWindow(userId:string) {\r\n        this.setState((prevState: any) => {\r\n            return {\r\n                ...prevState,\r\n                chatUserIds: [...Array.from((new Set([...prevState.chatUserIds, userId])))]\r\n            }\r\n        });\r\n    };\r\n    removeChatWindow(userId:string) {\r\n        console.log(\"@==\", userId);\r\n        this.setState((prevState: any) => {\r\n            prevState.chatUserIds.splice(\r\n                prevState.chatUserIds.findIndex((item:any) => item.id == userId), 1\r\n            );\r\n            return  prevState;\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = \"Home\";\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"home-page\">\r\n            { this.props.currentUser.isLoggedIn ? (\r\n                    <>\r\n                        {/** <ChatWindowsProvider value={{userIds:[], ()), removeUserId}}> **/}\r\n                            <Users addNewChatWindow={this.addNewChatWindow}/>\r\n                            <ChatWindows chatUserIds={this.state.chatUserIds} removeChatWindow={this.removeChatWindow}/>\r\n                        {/** </ChatWindowsProvider> **/}\r\n                    </>\r\n                ) : (\r\n                    <h6>User is not logger in </h6>\r\n                )\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect((state:RootState) => ({currentUser: state.user}) )(withRouter(Home));"],"sourceRoot":""}